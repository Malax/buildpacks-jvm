#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2034
app_dir="$(pwd)"
# shellcheck disable=SC2034
layers_dir="${1:?}"
# shellcheck disable=SC2034
platform_dir="${2:?}"
# shellcheck disable=SC2034
buildpack_plan="${3:?}"

# shellcheck source=SCRIPTDIR/../common-lib/log/cnb.sh
source "${CNB_BUILDPACK_DIR}/common-lib/log/cnb.sh"
# shellcheck source=SCRIPTDIR/../common-lib/jvm_buildpack_utils.sh
source "${CNB_BUILDPACK_DIR}/common-lib/jvm_buildpack_utils.sh"

########################################################################################################################
# Export environment variables
########################################################################################################################
export_env_vars=()
export_env_vars+=("HEROKU_BUILDPACK_DEBUG")

bputils::export_env "${platform_dir}" "${export_env_vars[@]}"

########################################################################################################################
# Install Java function runtime
########################################################################################################################
log::cnb::header "Installing Java function runtime"

runtime_jar_url="$(yj -t <"${CNB_BUILDPACK_DIR}/buildpack.toml" | jq -r ".metadata.runtime.url")"
runtime_jar_sha256="$(yj -t <"${CNB_BUILDPACK_DIR}/buildpack.toml" | jq -r ".metadata.runtime.sha256")"

runtime_layer_dir="${layers_dir}/sf-fx-runtime-java"
runtime_layer_jar_path="${runtime_layer_dir}/runtime.jar"
runtime_layer_toml="${runtime_layer_dir}.toml"

cached_layer_runtime_jar_sha256=""
if [[ -f "${runtime_layer_toml}" ]]; then
	cached_layer_runtime_jar_sha256=$(yj -t <"${runtime_layer_toml}" | jq -r ".metadata.runtime_jar_sha256 // empty")
fi

if [[ "${cached_layer_runtime_jar_sha256}" == "${runtime_jar_sha256}" && -f "${runtime_layer_jar_path}" ]]; then
	log::cnb::info "Installed Java function runtime from cache"
else
	log::cnb::debug "Creating function runtime layer"
	runtime_layer_dir="${layers_dir}/sf-fx-runtime-java"
	runtime_layer_toml="${runtime_layer_dir}.toml"
	mkdir -p "${runtime_layer_dir}"

	cat >"${runtime_layer_toml}" <<-EOF
		launch = true
		build = false
		cache = true

		[metadata]
		runtime_jar_url = "${runtime_jar_url}"

		# See commented code below on why this is currently not used
		# runtime_jar_sha256 = "${runtime_jar_sha256}"
	EOF
	log::cnb::debug "Function runtime layer successfully created"

	log::cnb::info "Starting download of function runtime"
	if ! bputils::download_file "${runtime_jar_url}" "${runtime_layer_jar_path}"; then
		log::cnb::error "Download of function runtime failed" <<-EOF
			We couldn't download the function runtime at "${runtime_jar_url}".
			This is usually caused by intermittent network issues. Please try again and contact us should the error persist.
		EOF
		exit 1
	fi
	log::cnb::info "Function runtime download successful"

	# SHA256 checksum checking is disabled for as the function runtime is very unstable and is updated very often.
	# We don't want to trigger a whole release cycle just for a minor update. This code must be reactivated for beta/GA!

	#if ! bputils::check_sha256 "${runtime_layer_jar_path}" "${runtime_jar_sha256}"; then
	#	log::cnb::error "Function runtime integrity check failed" <<-EOF
	#		We could not verify the integrity of the downloaded function runtime.
	#		Please try again and contact us should the error persist.
	#	EOF
	#	exit 1
	#fi

	log::cnb::info "Function runtime installation successful"
fi

########################################################################################################################
# Bundle function
########################################################################################################################
log::cnb::header "Detecting function"

function_bundle_layer_dir="${layers_dir}/function-bundle"
function_bundle_toml="${function_bundle_layer_dir}.toml"
mkdir -p "${function_bundle_layer_dir}"

cat >"${function_bundle_toml}" <<-EOF
	launch = true
	build = false
	cache = false
EOF

{
	java -jar "${runtime_layer_jar_path}" bundle "${app_dir}" "${function_bundle_layer_dir}"
	bundle_exit_code="${?}"
} || true

case "${bundle_exit_code}" in
0) log::cnb::info "Detection successful" ;;
1)
	log::cnb::error "No functions found" <<-EOF
		Your project does not seem to contain any Java functions.
		The output above might contain information about issues with your function.
	EOF
	exit 1
	;;
2)
	log::cnb::error "Multiple functions found" <<-EOF
		Your project contains multiple Java functions.
		Currently, only projects that contain exactly one (1) function are supported.
	EOF
	exit 1
	;;
3 | 4 | 5 | 6)
	log::cnb::error "Detection failed" <<-EOF
		Function detection failed with internal error "${bundle_exit_code}".
	EOF
	exit 1
	;;

*)
	log::cnb::error "Detection failed" <<-EOF
		Function detection failed with unexpected error code ${bundle_exit_code}.
		The output above might contain hints what caused this error to happen.
	EOF
	exit 1
	;;
esac

########################################################################################################################
# Log function info
########################################################################################################################
bundle_toml="${function_bundle_layer_dir}/function-bundle.toml"
log::cnb::header "Detected function: $(yj -t <"${bundle_toml}" | jq -r ".function.class")"
log::cnb::info "Payload type: $(log::cnb::bold "$(yj -t <"${bundle_toml}" | jq -r ".function.payload_class")")"
log::cnb::info "Return type: $(log::cnb::bold "$(yj -t <"${bundle_toml}" | jq -r ".function.return_class")")"

########################################################################################################################
# Generate launch.toml
########################################################################################################################
cat >>"${layers_dir}/launch.toml" <<-EOF
	[[processes]]
	type = "web"
	command = "java -jar ${runtime_layer_jar_path} serve ${function_bundle_layer_dir}"
EOF
